import org.gradle.plugins.signing.Sign
gradle.taskGraph.whenReady { taskGraph ->
    if (isReleaseVersion && taskGraph.allTasks.any { it instanceof Sign }) {
        // Use Java 6's console to read from the console (no good for a CI environment)
        Console console = System.console()
        console.printf "\n\nWe have to sign some things in this build.\n\nPlease enter your signing details.\n\n"

        def id = "855C7687"//console.readLine("PGP Key Id: ")
        def file = "/home/zhizhelev/.gnupg/secring.gpg"//console.readLine("PGP Secret Key Ring File (absolute path): ")
        def password = console.readPassword("PGP Private Key Password: ")

        allprojects { ext."signing.keyId" = id }
        allprojects { ext."signing.secretKeyRingFile" = file }
        allprojects { ext."signing.password" = password }

        console.printf "\nThanks.\n\n"
    }
}


ext {
    aGroup = 'ru.primetalk'
//    aVersion = '1.1.7-SNAPSHOT'
    aVersion = '1.1.6'//'1.2.0-SNAPSHOT'
    isReleaseVersion = !aVersion.endsWith("SNAPSHOT")

    scalaMajorVersion = '2.10'
    scalaFullVersion = "${scalaMajorVersion}.2"
    akkaVersion = '2.1.4'
    slf4j = "org.slf4j:slf4j-api:1.7.2"
}

allprojects {
    apply plugin: 'idea'

    repositories {
        //mavenLocal()
        mavenCentral()
    }
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.useAnt = false
    scalaCompileOptions.feature = true
}


subprojects {
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    group = aGroup
    version = aVersion


    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    dependencies {
        compile "org.scala-lang:scala-library:${scalaFullVersion}"

        testCompile "junit:junit:4.11"
        testCompile "org.scalatest:scalatest_${scalaMajorVersion}:1.9.1"
    }
    
    // making source.jar
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // making javadoc.jar
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    
    // adding source.jar and javadoc.jar to artifacts
    artifacts {
        archives jar

        archives sourcesJar
        archives javadocJar
    }


/*  publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven{ // declare properties in ~/.gradle/gradle.properties
                url nexusRep
                credentials {
                    username nexusUsername
                    password nexusPassword
                }
            }
        }
    }
 */
    
    configurations {
		deployerJars
	}
	
	dependencies {
		deployerJars "org.apache.maven.wagon:wagon-http:2.2"
	}
    
    uploadArchives {
        repositories {
            mavenDeployer {
                configuration = configurations.deployerJars
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
//                repository (url: nexusRep) {
//					authentication(userName: nexusUsername,
//                            password: nexusPassword)	// declare credentials in ~/.gradle/gradle.properties
//				}
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.project {
                    licenses {
                        license {
                            name 'BSD Software License, 2-clause version'
                            url 'https://github.com/Primetalk/SynapseGrid/blob/master/LICENSE.md'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'zhizhelev'
                            name 'Arseniy Zhizhelev'
                            email 'zhizhelev@primetalk.ru'
                        }
                        developer {
                            id 'nehaev'
                            name 'Anton Nehaev'
                            email 'nehaev@primetalk.ru'
                        }
                        developer {
                            id 'popov'
                            name 'Pavel Popov'
                            email 'popov@primetalk.ru'
                        }
                    }
                    scm {
                        url 'https://github.com/Primetalk/SynapseGrid'
                        connection 'scm:git:git@github.com:Primetalk/SynapseGrid.git'
                        developerConnection 'scm:git:git@github.com:Primetalk/SynapseGrid.git'
                    }

                }
            }
        }
    }
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}
project(':synapse-grid-core') {
    dependencies {
    }
}

project(':synapse-grid-slf4j') {
    dependencies {
        compile project(':synapse-grid-core')
        compile slf4j
    }
}

project(':synapse-grid-akka') {
    dependencies {
        compile project(':synapse-grid-slf4j')
        compile "com.typesafe.akka:akka-actor_$scalaMajorVersion:$akkaVersion"
        compile "com.typesafe.akka:akka-remote_$scalaMajorVersion:$akkaVersion"
        compile "com.typesafe.akka:akka-slf4j_$scalaMajorVersion:$akkaVersion"
    }
}

project(':synapse-grid-examples') {
    dependencies {
//        compile project(':synapse-grid-slf4j')
        compile project(':synapse-grid-akka')
    }
}


